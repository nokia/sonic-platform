#!/usr/bin/make -f
# -*- makefile -*-
# Sample debian/rules that uses debhelper.
# As a special exception, when this file is copied by dh-make into a
# dh-make output file, you may use that output file without restriction.

include /usr/share/dpkg/pkg-info.mk

# Uncomment this to turn on verbose mode.
#export DH_VERBOSE=1

export INSTALL_MOD_DIR:=extra

PYTHON3        ?= python3

PACKAGE_PRE_NAME := sonic-platform-nokia
KVERSION   ?= $(shell uname -r)
KERNEL_SRC :=  /lib/modules/$(KVERSION)
#KERNEL_SRC :=  /lib/modules/4.19.39


MOD_SRC_DIR:= $(shell pwd)
MODULE_DIRS:= chassis ixr7220h3 ixr7220h4-32d ixr7220h5-32d ixr7220h5-64d ixr7220h4-64d \
  ixr7220h5-64o ixr7250x1b ixr7250x3b ixr7220d4
BRIDGE_DRIVER_TARGETS :=ixr7250x1b ixr7250x3b
MODULE_DIR := modules
UTILS_DIR := utils
SERVICE_DIR := service
PLATFORM_DIR := sonic_platform
CONF_DIR := conf
BLDENV := $(shell lsb_release -cs)

DO_BRIDGE_PACKAGE=$(BRIDGE_DRIVER_TARGETS)
ACTIVE_MODULE_DIRS=$(MODULE_DIRS)

%:
	dh $@ --with systemd,python3 --buildsystem=pybuild

clean:
	dh_testdir
	dh_testroot
	dh_clean

build:
	if [ -e /sonic/target/debs/$(BLDENV)/ndk_*_amd64.deb ]; then \
		dpkg -x /sonic/target/debs/$(BLDENV)/ndk_*_amd64.deb debian/sonic-platform-nokia-chassis; \
		cp debian/sonic-platform-nokia-chassis/opt/srlinux/bin/platform_ndk_pb2* chassis/platform_ndk/; \
		if [ -e /sonic/target/debs/$(BLDENV)/ethtool_*_amd64.deb ]; then \
			dpkg -x /sonic/target/debs/$(BLDENV)/ethtool_*_amd64.deb  /tmp; \
			cp /tmp/sbin/ethtool debian/sonic-platform-nokia-chassis/opt/srlinux/bin; \
		fi \
	fi

ifneq (,$(DO_BRIDGE_PACKAGE))
	KERNEL_SRC=$(KERNEL_SRC) $(MAKE) -C $(MOD_SRC_DIR)/mackinac
endif
	#make modules -C $(KERNEL_SRC)/build M=$(MODULE_SRC)
	(for mod in $(ACTIVE_MODULE_DIRS); do \
		$(MAKE) modules -C $(KERNEL_SRC)/build M=$(MOD_SRC_DIR)/$${mod}/modules || exit 1; \
		cd $(MOD_SRC_DIR)/$${mod}; \
		$(PYTHON3) setup.py bdist_wheel -d $(MOD_SRC_DIR)/$${mod}/modules; \
		cd $(MOD_SRC_DIR); \
	done)

binary: binary-arch binary-indep
	# Nothing to do

binary-arch:
	# Nothing to do

binary-indep:
# temporary commented out
#	dh_testdir
	dh_installdirs

	# Custom package commands
	(for mod in $(MODULE_DIRS); do \
		dh_installdirs -p$(PACKAGE_PRE_NAME)-$${mod} /$(KERNEL_SRC)/$(INSTALL_MOD_DIR); \
		dh_installdirs -p$(PACKAGE_PRE_NAME)-$${mod} /usr/local/bin; \
		dh_installdirs -p$(PACKAGE_PRE_NAME)-$${mod} /lib/systemd/system; \
		$(MAKE) modules_install -C $(KERNEL_SRC)/build M=$(MOD_SRC_DIR)/$${mod}/modules INSTALL_MOD_PATH=$(MOD_SRC_DIR)/debian/$(PACKAGE_PRE_NAME)-$${mod}; \
		cp $(MOD_SRC_DIR)/$${mod}/$(UTILS_DIR)/* debian/$(PACKAGE_PRE_NAME)-$${mod}/usr/local/bin/; \
		cp $(MOD_SRC_DIR)/$${mod}/$(SERVICE_DIR)/*.service debian/$(PACKAGE_PRE_NAME)-$${mod}/lib/systemd/system/; \
		cd $(MOD_SRC_DIR)/$${mod}; \
		$(PYTHON3) setup.py install --root=$(MOD_SRC_DIR)/debian/$(PACKAGE_PRE_NAME)-$${mod} --install-layout=deb; \
		cd $(MOD_SRC_DIR); \
	done)

	# bridge code pulled in
	# cp $(MOD_SRC_DIR)/mackinac/$(MODULE_DIR)/*.ko debian/$(PACKAGE_PRE_NAME)-$${mod}/$(KERNEL_SRC)/$(INSTL_MOD_DIR);
	(for mod in $(DO_BRIDGE_PACKAGE); do \
		DEST=$(MOD_SRC_DIR)/debian/$(PACKAGE_PRE_NAME)-$${mod}/ KERNEL_SRC=$(KERNEL_SRC) $(MAKE) -C $(MOD_SRC_DIR)/mackinac install; \
	done)

	# Resuming debhelper scripts
	dh_testroot
	dh_install
	dh_installchangelogs
	dh_installdocs
	dh_systemd_enable
	dh_installinit
	dh_systemd_start
	dh_link
	dh_fixperms
	dh_compress
	dh_strip
	dh_installdeb
	dh_gencontrol
	dh_md5sums
	dh_builddeb
.PHONY: build binary binary-arch binary-indep clean
